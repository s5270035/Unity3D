float sqr(float x) { return x*x; }  

float G_Smith(float roughness, float NoV, float NoL)
{
    // Schlich model
    // G(l,v,h) = G1(l)G1(v)
    float  k = (roughness + 1) * (roughness + 1) /8;
    return  (NoV / (NoV * (1 - k) + k)) *  (NoL / (NoL * (1 - k) + k));
}

fixed4 GGX_BRDF(float roughness, half3 lightDir, half3 viewDir, float3 Normal, fixed3 specularColor, fixed3 diffuseColor, fixed3 lightColor)
{
    float pi = 3.14159;
    viewDir = normalize(viewDir);
    lightDir = normalize(lightDir);
    half3 h = normalize (lightDir + viewDir);
    float NdotL = max(0, dot ( Normal, lightDir));
    float NdotH = max (0, dot (Normal, h));
    float NdotV = max(0, dot(Normal, viewDir));
    float LdotH = max(0, dot(lightDir, h));
    float VdotH = max(0 , dot(viewDir, h));
    float3 Kd = 0;
    lightColor.rgb *= NdotL;
    Kd = diffuseColor / pi;
    half4 c;
    c.rgb = Kd * lightColor;
          
    // GGX NDF          
    float alpha =  roughness *  roughness;
    float beta = ((NdotH * NdotH) * (alpha*alpha -1.0) + 1.0);
    float Specular_D =  alpha * alpha/ (pi * beta * beta);
    fixed3 f0 = specularColor;
    float G = G_Smith(roughness, NdotV, NdotL);          
    float Specular_G = G * VdotH / (NdotH , NdotV);
    fixed3 Fschlick =  f0 + (fixed3(1,1,1) - f0)* pow(1 - LdotH, 5);
    c.rgb += Specular_D*Specular_G*Fschlick * lightColor.rgb;
    c.a = 1;
    return c;
}

float GGXNormalDistribution(float roughness, half3 lightDir, half3 viewDir, float3 Normal)
{
    half3 h = normalize (lightDir + viewDir);
    float NdotH = max (0, dot (Normal, h));
    float roughnessSqr = roughness*roughness;
    float NdotHSqr = NdotH*NdotH;
    float TanNdotHSqr = (1-NdotHSqr)/NdotHSqr;
    return (1.0/3.1415926535) * sqr(roughness/(NdotHSqr * (roughnessSqr + TanNdotHSqr)));
}

// Generalized-Trowbridge-Reitz distribution  
float D_GTR1(float alpha, float dotNH) 
{ 
 
    float a2 = alpha * alpha;  
    float cos2th = dotNH * dotNH;  
    float den = (1.0 + (a2 - 1.0) * cos2th);  
 
    return (a2 - 1.0) / (3.1415926535 * log(a2) * den);  
} 

float D_GTR2(float alpha, float dotNH) 
{ 
    float a2 = alpha * alpha;  
    float cos2th = dotNH * dotNH;  
    float den = (1.0 + (a2 - 1.0) * cos2th);  
    return a2 / (3.1415926535 * den * den);  
} 

float smithG_GGX(float NdotV, float alphaG) 
{  
    float a = alphaG * alphaG;  
    float b = NdotV * NdotV;  
    return 1 / (NdotV + sqrt(a + b - a * b));  
} 